/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/

/**
 * API to request shell-specific information such as environment and shellInfo.
 *
 * ***Import:***
 *
 * ```typescript
 * import shell from '@adobe/exc-app/shell';
 * ```
 *
 * ***Default export:***
 *
 * [ShellApi](../interfaces/shell.shellapi.md#interface-shellapi)
 *
 * ***Usage:***
 *
 * Below is an example of how to get various attributes associated to the shell:
 *
 * ```typescript
 * import shell from '@adobe/exc-app/shell';
 *
 * const [env, imsEnv, info] = await Promise.all([
 *   shell.get('environment'),
 *   shell.get('imsEnvironment'),
 *   shell.get('shellInfo')
 * ]);
 * ```
 *
 * ### Receiving updates
 *
 * You can also listen for updates on the requested data by listening to specific change events.
 *
 * These change events are emitted from the api that the data is requested from. For example, if a
 * shell calls `await shell.get('shellInfo');` they must listen for the change event on
 * `shell.on('change:shellInfo')`. If a shell calls `await shell.get('environment')` they must listen for the
 * change event on `shell.on('change:environment')`. Here is a more detailed example of how the promise
 * api and change events can be used to keep track of specific values from the config:
 *
 * ```typescript
 * import shell from '@adobe/exc-app/shell';
 *
 * constructor() {
 *   this.state = {environment: null};
 *
 *   shell.on('change:environment', (env) => {
 *     this.setState({env});
 *   });
 * }
 *
 * async componentDidMount() {
 *   const env = await shell.get('environment');
 *   this.setState({env});
 * }
 * ```
 * @packageDocumentation
 * @module shell
 */

import EventEmitter from './src/EventEmitter';
import {getImpl} from './src/Global';

export interface ShellInfo {
  environment: string;
  imsEnvironment: string;
  shellInfo: Record<string, any>;
}

interface ShellInfoEvent {
  'change:environment': string;
  'change:imsEnvironment': string;
  'change:shellInfo': Record<string, any>;
}

export interface ShellApi extends EventEmitter<ShellInfoEvent> {
  /**
   * Gets the specified type of information about the shell.
   * @param type The type of information to get.
   */
  get<T extends keyof ShellInfo>(type: T): Promise<ShellInfo[T]>;
}

const shell = {
  emit: (type, evt) => {
    return getImpl('shell')().emit(type, evt);
  },
  get: params => {
    return getImpl('shell')().get(params);
  },
  off: (type, handler) => {
    return getImpl('shell')().off(type, handler);
  },
  on: (type, handler) => {
    return getImpl('shell')().on(type, handler);
  }
} as ShellApi;

export default shell;
