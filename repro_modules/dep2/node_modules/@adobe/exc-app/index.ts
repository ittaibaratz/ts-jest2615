/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/

/**
 * API used to integrate as solution web application with the unified shell of the Adobe Experience
 * Cloud.
 * @packageDocumentation
 * @preferred
 */

import Global, {getImpl} from './src/Global';
import Runtime from './src/Runtime';

/**
 * Get the runtime object which contains all unified-shell APIs.
 *
 * ***Example:***
 *
 * ```typescript
 * import React from 'react';
 * import ReactDOM from 'react-dom';
 * import excApp from '@adobe/exc-app';
 *
 * export class MyComponent extends React.Component {
 *   constructor(props) {
 *     this.runtime = excApp();
 *   }
 * }
 * ```
 * @returns The runtime object.
 */
export default function runtime(): Runtime {
  // Pass through first argument for backwards compatibility
  return getImpl('default')(arguments[0]); // eslint-disable-line prefer-rest-params
}

/**
 * Initializes a solution web application by invoking the bootstrap callback
 * once the runtime is ready.
 * 1. if the module is already defined, start to bootstrap
 * 2. otherwise define the global callback that will be called when runtime is ready.
 *
 * ***Example:***
 *
 * ```typescript
 * import React from 'react';
 * import ReactDOM from 'react-dom';
 * import runtime, {init} from '@adobe/exc-app';
 *
 * init(() => {
 *   ReactDOM.render(<MainComponent runtime={runtime()} />, document.querySelector('#main'));
 * });
 * ```
 * @param bootstrap Callback used to bootstrap a solution. The runtime object is passed in as a
 * parameter to this callback.
 */
export function init(bootstrap: (runtime: Runtime) => void): void {
  const callback = (): void => {
    bootstrap(runtime());
  };
  if (Global['exc-module-runtime']) {
    callback();
  } else {
    Global.EXC_MR_READY = callback;
  }
}

export type {Runtime};
