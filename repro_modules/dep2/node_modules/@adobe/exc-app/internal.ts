/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/

/**
 * Internal APIs, meant to be used by Unified Shell only.
 * @ignore
 */
import {Application} from './metrics/Application';
import {getImpl, Modules} from './src/Global';
import MetricsConfiguration from './metrics/Configuration';
import {Configuration as NetworkConfiguration} from './network';
import User from './metrics/User';

export type {Modules};

/**
 * @ignore
 */
export interface InternalApi {
  clearUser(version?: string): void
  configureMetrics(config?: MetricsConfiguration): Promise<MetricsConfiguration>;
  configureNetwork(config: NetworkConfiguration): void;
  flush(): Promise<number>;
  setApplication(app: Application): void;
  setFilter(filterFunction: <T>(record: T) => Promise<T>): void;
  setUser(user: User, version?: string): void;
}

/**
 * @ignore
 */
export class Internal {
  public static configureMetrics(config?: MetricsConfiguration): Promise<MetricsConfiguration> {
    return getImpl('internal').configureMetrics(config);
  }
  public static configureNetwork(config: NetworkConfiguration): void {
    return getImpl('internal').configureNetwork(config);
  }
  public static flush(): Promise<number> {
    return getImpl('internal').flush();
  }
  public static setApplication(app: Application): void {
    return getImpl('internal').setApplication(app);
  }
  public static setFilter(filterFunction: <T>(record: T) => Promise<T>): void {
    return getImpl('internal').setFilter(filterFunction);
  }
  public static setUser(user: User, version?: string): void {
    return getImpl('internal').setUser(user, version);
  }
  public static clearUser(version?: string): void {
    return getImpl('internal').clearUser(version);
  }
}

