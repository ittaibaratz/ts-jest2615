/*************************************************************************
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/

/**
 * APIs to get permissions for a user. An app in unified shell can consume Permissions service.
 *
 * To consume this API, add the following import to your code.
 *
 * ```typescript
 * import permissions from '@adobe/exc-app/permissions';
 * ```
 *
 * The default export is an object of type [PermissionsApi](../interfaces/_permissions_.permissionsapi.md)
 *
 * API reference: [scroll down](#index)
 *
 * ### Sample code
 *
 * ```typescript
 * import permissions from '@adobe/exc-app/permissions';
 *
 * const {permissions: perms} = await permissions.get({permissions: [
 *   'permission1',
 *   'permission2'
 * ]});
 * ```
 *
 * All permissions can be requested using the key '*'
 * ```typescript
 * import permissions from '@adobe/exc-app/permissions';
 *
 * const {permissions: perms} = await permissions.get({permissions: ['*']});
 * ```
 * @packageDocumentation
 * @module permissions
 */

import {getImpl} from './src/Global';

/**
 * A map of permissions in the permissions service.
 */
export interface Permissions {
  [key: string]: string[];
}

/**
 * The response from the permissions service.
 */
export interface PermissionsResponse<T extends Permissions> {
  /**
   * The map of permissions.
   */
  permissions?: T;

  /**
   * The map of resource types.
   */
  resourceTypes?: T;
}

/**
 * The input parameters for the permissions API.
 */
export interface Parameters {
  /**
   * List of permissions to get.
   */
  permissions?: string[];

  /**
   * List of resource types to get.
   */
  resourceTypes?: string[];
}

/**
 * APIs to get permissions. An app in unified shell can consume PALM ACL service.
 */
export interface PermissionsApi {
  /**
   * Gets permissions based on the specified parameters.
   * @param params Parameters used to identify permissions to retrieve.
   * @returns A promise for the specified permissions.
   */
  get<T extends Permissions>(params: Parameters): Promise<PermissionsResponse<T>>;
}

const permissions: PermissionsApi = {
  get: (params) => {
    return getImpl('permissions')().get(params);
  }
};

export default permissions;
