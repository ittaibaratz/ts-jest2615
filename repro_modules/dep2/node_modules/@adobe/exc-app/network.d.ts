/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
export interface FetchOptions {
    /**
     * A boolean value indicating whether to add Authentication token, API Key to the request.
     */
    auth?: 'Header' | 'Body';
    /**
     * @deprecated excludeSandbox should be replaced with scope
     */
    excludeSandbox?: boolean;
    /**
     * @deprecated excludeSandboxType should be replaced with scope
     */
    excludeSandboxType?: boolean;
    /**
     * Number indicating how many fetch attempts should be made using exponential backoff.
     */
    maxRetries?: number;
    metadata?: DefaultMetaData;
    /**
     * Specify the headers to be added to the request
     */
    scope?: FetchScope;
    /**
     * Number in ms indicating the maximum amount of time taken by the the fetch request plus any
     * exponential backoff retry requests before aborting.
     */
    totalFetchTime?: number;
}
/**
 * User Sandbox Interface
 */
interface Sandbox {
    /**
     * Whether it is the default sandbox
     */
    isDefault: boolean;
    /**
     * Sandbox ID
     */
    name: string;
    /**
     * Region
     */
    region: string;
    /**
     * Current state
     */
    state: string;
    /**
     * Sandbox Display Title
     */
    title: string;
    /**
     * Environment type
     */
    type: string;
}
/**
 * @ignore
 */
export interface Configuration {
    /**
     * Unified Shell API Gateway URL
     */
    apiGatewayUrl: string;
    /**
     * appId from solution route config
     */
    appId: string;
    /**
     * Get Authentication token
     */
    getTokenInfo: () => Promise<{
        token: string;
    }>;
    /**
     * IMS Client ID
     */
    imsClientId: string;
    /**
     * metricsAppId from solution route config
     */
    metricsAppId?: string;
    /**
     * @deprecated tenantAppId from solution route config
     */
    tenantAppId?: string;
    /**
     * IMS org id
     */
    imsOrg?: string;
    /**
     * Current sandbox object
     */
    sandbox?: Sandbox;
    /**
     * Adobe IO gateway URL used as a fallback in GQL call
     */
    ioGatewayUrl?: string;
    /**
     * Map of Adobe IO region specific endpoints.
     */
    ioRegionSpecificMap?: Record<string, string>;
    /**
     * Clients can pass in their local GQL endpoint
     */
    gqlEndpoint?: string;
    /**
     * XQL gateway used for AEP specific queries
     */
    xqlGatewayUrl?: string;
}
/**
 * GQL Query containing graphql query and variables.
 */
export interface GraphQLQuery {
    /**
     * GQL Query.
     *
     * ***Example:***
     *
     * ```typescript
     * {query: `
     *   query userBehanceQuery($userId: String!, $apiKey: String!) {
     *     userBehance(userId: $userId, apiKey: $apiKey) {
     *       images
     *     }
     *   }`
     * };
     *
     * {query: `
     *   query userBehanceQuery {
     *     userBehance(userId: "123@AdobeID", apiKey: "test-app") {
     *       images
     *     }
     *   }`
     * };
     * ```
     */
    query: string;
    /**
     * Query specific variables- key value pairs.
     *
     * ***Example:***
     *
     * ```typescript
     * {variables: {
     *   apiKey: 'test-app',
     *   userId: '123@AdobeID'
     *  }
     * };
     * ```
     */
    variables?: Record<string, any>;
}
/**
 * SPA's can pass in the metadata to override the default values
 */
export interface DefaultMetaData {
    imsClientId?: string;
    token?: string;
    imsOrg?: string;
    sandbox?: Record<string, any>;
}
export declare enum ROUTING {
    AEP_PROFILE_BASED = 0
}
/**
 * Query request interface.
 */
export interface QueryRequest {
    /**
     * Overwrite config.appId until federation is out. This allow scenario where sharing components that are linked to their own tenants.
     */
    appId?: string;
    /**
     * Data containing single or multiple GQL queries.
     *
     * ***Example:***
     *
     * ```typescript
     * {data: {
     *   query: `
     *     query userBehanceQuery($userId: String!, $apiKey: String!) {
     *       userBehance(userId: $userId, apiKey: $apiKey) {
     *         images
     *       }
     *     }`,
     *   variables: {
     *     userId: '123@AdobeID',
     *     apiKey: 'test-app'
     *   }
     *  }
     * };
     * ```
     */
    data: GraphQLQuery | Array<GraphQLQuery>;
    /**
     * Whether or not to exclude sandbox headers.
     */
    excludeSandbox?: boolean;
    /**
     * Query ID- To analyze a query's metrics & performance.
     *
     * ***Example:***
     *
     * ```typescript
     * {operationName: 'BehanceAvatar'}
     * ```
     */
    operationName?: string;
    /**
     * Number indicating how many fetch attempts should be made using exponential backoff.
     */
    maxRetries?: number;
    /**
     * default metadata should be given when you want to override the default metadata which will be passed with every request
     */
    metadata?: DefaultMetaData;
    /**
     * passed as true if someone wants to call the region specific endpoints directly.
     */
    regionEnabled?: boolean;
    /**
     * Enable profile based routing
     */
    routing?: ROUTING;
    /**
     * Pass enum to set headers according to the requirements
     */
    scope?: FetchScope;
    /**
     * Number in ms indicating the maximum amount of time taken by the request plus any exponential backoff
     * requests before aborting.
     */
    totalFetchTime?: number;
}
/**
 * This parameter will be used to specify what headers are automatically added to the API call.
 */
export declare enum FetchScope {
    /**
     * ***none: Minimal scope***
     * No headers are added. Use case: Non authenticated calls.
     */
    NONE = "NONE",
    /**
     * *** auth: Authentication only. Only auth headers will be added: ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     */
    AUTH = "AUTH",
    /**
     * *** org: Authentication + IMS Org. ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     */
    ORG = "ORG",
    /**
     * *** sandbox: Authentication +IMS Org + PALM Sandboxes. ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     * x-sandbox-name: <SANDBOX NAME>
     */
    SANDBOX = "SANDBOX",
    /**
     * *** sandbox-plus: additional headers required with sandbox . ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     * x-sandbox-name: <SANDBOX NAME>
     * x-sandbox-type: <SANDBOX TYPE>
     * x-sandbox-default: <SANDBOX DEFAULT>
     */
    SANDBOX_PLUS = "SANDBOX_PLUS"
}
/**
 * Defines the object containing any custom settings that you want to apply to the request. You can
 * also additionally specify the 'auth' parameter to automatically set the Authentication, API key in Headers/Query params.
 *
 * ***Example:***
 *
 * `{auth: 'Header', body: 'xyz', headers: {'Content-Type': 'text/plain'}, method: 'POST'}` or
 * `{auth: 'Header', method: 'GET'}` or
 * `{method: 'GET'}`
 */
export declare type FetchInit = RequestInit & FetchOptions;
export interface NetworkApi {
    /**
     * @deprecated
     * @ignore
     */
    configure(config: Configuration): void;
    /**
     * Provides an interface for fetching resources powered by the global 'fetch' API.
     *
     * ***Example:***
     *
     * ```typescript
     * // performs a window.fetch call
     * let response = await fetch('https://example.com/api/ping');
     *
     * // performs a window.fetch call with Authorization and x-api-key headers set
     * response = await fetch('https://localhost', {auth: 'Header', method: 'GET'});
     *
     * // performs a window.fetch call with user_token and client_id query parameters added to the URL
     * const request = new Request('https://localhost', {
     *   body: JSON.stringify({k: 'v'}),
     *   headers: new Headers(),
     *   method: 'POST'
     * });
     * response = await fetch(request, {auth: 'Header'});
     * ```
     * @param input The resource that you wish to fetch. It can either be the URL of the resource
     * you want to fetch or a Request object.
     * @param init An object containing any custom settings that you want to apply to the request.
     * @returns The promise for the response to the fetch operation.
     */
    fetch(input: RequestInfo, init?: FetchInit): Promise<Response>;
    /**
     * Provides an interface for querying resources via GraphqQL.
     * In order to consume query, please make sure the respective query resolver is
     * available in the GraphQL Service.
     *
     * ***Example:***
     *
     * ```typescript
     * const BEHANCE_QUERY = `
     *   query userBehanceQuery($userId: String!, $apiKey: String!) {
     *     userBehance(userId: $userId, apiKey: $apiKey) {
     *       images
     *     }
     *   }`;
     *
     * // queries the respective resource via GraphQL and returns HTTP Response {ok: true, status: 200, ...}
     * query({data: {query: BEHANCE_QUERY, variables: {
     *   userId: '123@AdobeID',
     *   apiKey: 'test-app',
     * }}, operationName: 'BehanceAvatar'});
     *
     * // queries the respective resource via GraphQL and returns HTTP Response {ok: true, status: 200, ...}
     * query({data: {query: `
     *   query userBehanceQuery {
     *     userBehance(userId: "123@AdobeID", apiKey: "test-app") {
     *       images
     *     }
     *   }`
     * }});
     * ```
     * @param request Query request containing desired GQL Query.
     * @returns The promise for the response to the query operation.
     */
    query(request: QueryRequest): Promise<Response>;
}
/**
 * Provides an interface for fetching resources powered by the global 'fetch' API.
 *
 * ***Example:***
 *
 * ```typescript
 * // performs a window.fetch call
 * let response = await fetch('https://example.com/api/ping');
 *
 * // performs a window.fetch call with Authorization and x-api-key headers set
 * response = await fetch('https://localhost', {auth: 'Header', method: 'GET'});
 *
 * // performs a window.fetch call with user_token and client_id query parameters added to the URL
 * const request = new Request('https://localhost', {
 *   body: JSON.stringify({k: 'v'}),
 *   headers: new Headers(),
 *   method: 'POST'
 * });
 * response = await fetch(request, {auth: 'Header'});
 * ```
 * @param input The resource that you wish to fetch. It can either be the URL of the resource you
 * want to fetch or a Request object.
 * @param init An object containing any custom settings that you want to apply to the request.
 * @returns The promise for the response to the fetch operation.
 */
export declare function fetch(input: RequestInfo, init?: FetchInit): Promise<Response>;
/**
 * Provides an interface for querying resources via GraphqQL.
 * In order to consume query, please make sure the respective query resolver is
 * available in the GraphQL Service.
 * ***Example:***
 *
 * ```typescript
 * const BEHANCE_QUERY = `
 *   query userBehanceQuery($userId: String!, $apiKey: String!) {
 *     userBehance(userId: $userId, apiKey: $apiKey) {
 *       images
 *     }
 *   }`;
 *
 * // queries the respective resource via GraphQL and returns HTTP Response {ok: true, status: 200, ...}
 * query({data: {query: BEHANCE_QUERY, variables: {
 *   userId: '123@AdobeID',
 *   apiKey: 'test-app',
 * }}, operationName: 'BehanceAvatar'});
 *
 * // queries the respective resource via GraphQL and returns HTTP Response {ok: true, status: 200, ...}
 * query({data: {query: `
 *   query userBehanceQuery {
 *     userBehance(userId: "123@AdobeID", apiKey: "test-app") {
 *       images
 *     }
 *   }`
 * }});
 * ```
 * @param input Query request containing desired GQL Query.
 * @returns The promise for the response to the query operation.
 */
export declare function query(input: QueryRequest): Promise<Response>;
export {};
