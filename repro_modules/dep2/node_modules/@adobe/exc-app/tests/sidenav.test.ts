/*************************************************************************
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
import Global, {Modules} from '../src/Global';
import sidenav, {SidenavApi, SidenavInfo} from '../sidenav';

describe('sidenav.ts', () => {
  const evt = true;
  const handler = () => {};
  const sidenavMock = {
    collapsed: true,
    emit: (type, evt) => {
      return {evt, type};
    },
    get: (param: SidenavInfo) => {
      return Promise.resolve(param);
    },
    off: (type, handler) => {
      return {handler, type};
    },
    on: (type, handler) => {
      return {handler, type};
    },
    visible: true
  } as SidenavApi;

  beforeEach(() => {
    (Global['exc-module-runtime'] as Modules) = {
      sidenav: () => {
        return sidenavMock;
      }
    } as Modules;
  });

  it('can emit()', () => {
    const spy = jest.spyOn(sidenavMock, 'emit');

    // action
    sidenav.emit('change:shellSideNavCollapsed', evt),

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:shellSideNavCollapsed', evt);
  });

  it('can get()', async () => {
    const spy = jest.spyOn(sidenavMock, 'get');

    // action
    await Promise.all([
      sidenav.get('shellSideNavCollapsed')
    ]);

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('shellSideNavCollapsed');

    // verify getters
    expect(sidenav.collapsed).toEqual(true);
    expect(sidenav.visible).toEqual(true);
  });

  it('can off()', () => {
    const spy = jest.spyOn(sidenavMock, 'off');

    // action
    sidenav.off('change:shellSideNavCollapsed', handler),

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:shellSideNavCollapsed', handler);
  });

  it('can on()', () => {
    const spy = jest.spyOn(sidenavMock, 'on');

    // action
    sidenav.on('change:shellSideNavCollapsed', handler);

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:shellSideNavCollapsed', handler);
  });
});
