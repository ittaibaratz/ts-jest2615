/*************************************************************************
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
import Global, {Modules} from '../src/Global';
import {
  Permissions,
  default as permissionsApi,
  PermissionsApi,
  PermissionsResponse
} from '../permissions';

describe('permissions.ts', () => {
  let getSpy: any;

  beforeAll(() => {
    const permissionsMock = {get: jest.fn()} as PermissionsApi;
    (Global['exc-module-runtime'] as Modules) = {
      permissions: () => {
        return permissionsMock;
      }
    } as Modules;
    getSpy = jest.spyOn(permissionsMock, 'get');
  });

  afterEach(() => jest.clearAllMocks());

  it('calls runtime permissions service with permissions', async () => {
    getSpy.mockImplementationOnce(() => Promise.resolve<PermissionsResponse<Permissions>>({permissions: {
      permission1: ['*'],
      permission2: ['read', 'write']
    }}));

    const {permissions} = await permissionsApi.get<Permissions>({permissions: ['permission1', 'permission2']});
    expect(getSpy).toBeCalledTimes(1);
    expect(getSpy).toBeCalledWith({permissions: ['permission1', 'permission2']});
    expect(permissions).toEqual({
      permission1: ['*'],
      permission2: ['read', 'write']
    });
  });

  it('calls runtime permissions service with resourceTypes', async () => {
    getSpy.mockImplementationOnce(() => Promise.resolve<PermissionsResponse<Permissions>>({resourceTypes: {
      permission1: ['*'],
      permission2: ['read', 'write']
    }}));

    const {resourceTypes} = await permissionsApi.get<Permissions>({resourceTypes: ['permission1', 'permission2']});
    expect(getSpy).toBeCalledTimes(1);
    expect(getSpy).toBeCalledWith({resourceTypes: ['permission1', 'permission2']});
    expect(resourceTypes).toEqual({
      permission1: ['*'],
      permission2: ['read', 'write']
    });
  });

  it('calls runtime permissions service with resourceTypes', async () => {
    getSpy.mockImplementationOnce(() => Promise.resolve<PermissionsResponse<Permissions>>({
      permissions: {
        permission1: ['*'],
        permission2: ['read', 'write']
      },
      resourceTypes: {
        permission1: ['*'],
        permission2: ['read', 'write']
      }
    }));

    const res = await permissionsApi.get<Permissions>({
      permissions: ['permission1', 'permission2'],
      resourceTypes: ['permission1', 'permission2']
    });
    expect(getSpy).toBeCalledTimes(1);
    expect(getSpy).toBeCalledWith({
      permissions: ['permission1', 'permission2'],
      resourceTypes: ['permission1', 'permission2']
    });
    expect(res).toEqual({
      permissions: {
        permission1: ['*'],
        permission2: ['read', 'write']
      },
      resourceTypes: {
        permission1: ['*'],
        permission2: ['read', 'write']
      }
    });
  });
});
