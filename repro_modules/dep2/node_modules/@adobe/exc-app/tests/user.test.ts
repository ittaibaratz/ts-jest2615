/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
import Global, {Modules} from '../src/Global';
import user, {IMS, UserApi, UserInfo} from '../user';

describe('user.ts', () => {
  const evt = '';
  const handler = () => {};
  const userMock = {
    authExpired: () => {},
    emit: (type, evt) => {
      return {evt, type};
    },
    get: (param: UserInfo) => {
      return Promise.resolve(param);
    },
    getCustomToken: (ims: IMS) => {
      return Promise.resolve(ims.toString());
    },
    logoutUrl: 'https://localhost/logout',
    off: (type, handler) => {
      return {handler, type};
    },
    on: (type, handler) => {
      return {handler, type};
    },
    showLanguagePicker: undefined
  } as UserApi;

  beforeEach(() => {
    (Global['exc-module-runtime'] as Modules) = {
      user: () => {
        return userMock;
      }
    } as Modules;
  });

  it('can emit()', () => {
    const spy = jest.spyOn(userMock, 'emit');

    // action
    user.emit('change:theme', evt),

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:theme', evt);
  });

  it('can get()', async () => {
    const spy = jest.spyOn(userMock, 'get');

    // action
    await Promise.all([
      user.get('imsOrg'),
      user.get('imsOrgName'),
      user.get('imsOrgs'),
      user.get('imsToken'),
      user.get('imsProfile'),
      user.get('locale'),
      user.get('preferredLanguages'),
      user.get('sandbox'),
      user.get('sandboxes'),
      user.get('subOrg'),
      user.get('tenant'),
      user.get('theme')
    ]);

    // verify
    expect(spy).toBeCalledTimes(12);
    expect(spy).toBeCalledWith('imsOrg');
    expect(spy).toBeCalledWith('imsOrgName');
    expect(spy).toBeCalledWith('imsOrgs');
    expect(spy).toBeCalledWith('imsToken');
    expect(spy).toBeCalledWith('imsProfile');
    expect(spy).toBeCalledWith('locale');
    expect(spy).toBeCalledWith('preferredLanguages');
    expect(spy).toBeCalledWith('sandbox');
    expect(spy).toBeCalledWith('sandboxes');
    expect(spy).toBeCalledWith('subOrg');
    expect(spy).toBeCalledWith('tenant');
    expect(spy).toBeCalledWith('theme');

    // Verify logoutUrl getter
    expect(user.logoutUrl).toEqual('https://localhost/logout');
  });

  it('can getCustomToken()', async () => {
    const spy = jest.spyOn(userMock, 'getCustomToken');
    user.getCustomToken({client_id: 'client', scopes: 'scope1,scope2'});
    expect(spy).toBeCalledTimes(1);
  });

  it('can off()', () => {
    const spy = jest.spyOn(userMock, 'off');

    // action
    user.off('change:imsOrg', handler),

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:imsOrg', handler);
  });

  it('can on()', () => {
    const spy = jest.spyOn(userMock, 'on');

    // action
    user.on('change:tenant', handler);

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:tenant', handler);
  });

  it('can call authExpired', () => {
    const user = Global['exc-module-runtime'].user();
    const authExpiredSpy = jest.spyOn(user, 'authExpired');
    user.authExpired();
    expect(authExpiredSpy).toBeCalledTimes(1);
  });
});
