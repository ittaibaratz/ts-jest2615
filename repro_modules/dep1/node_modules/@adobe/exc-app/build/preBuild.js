/*************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2020 Adobe
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 **************************************************************************/
/* eslint-disable @typescript-eslint/no-var-requires */
const fs = require('fs');
const landingPage = require('../../core/src/services/AppAssemblyConstants/landingPage');
const path = require('path');
const services = require('../../core/src/services/AppAssemblyConstants/services');
const solutions = require('../../core/src/services/AppAssemblyConstants/solutions');

// Default IDs to add to the appapi file. This is to keep old versions of ids
// in case they might be used by developers.
const DEFAULT_IDS = {
  CUSTOMER_JOURNEY_MANAGEMENT: 'cjm-home',
  LAUNCH_IMPLEMENT: 'implement',
  PROJECT_SIERRA: 'cjm-home'
};

function updateName(name) {
  return name.toUpperCase()
    .split(' ')
    .join('_')
    .replace('-', '_')
    .replace('_/_', '_');
}

// Dynamically generate an enum list of allowed appIds to support the App API
const fixtureList = solutions.concat(services).concat(landingPage);
const ids = new Set(Object.values(fixtureList.filter(f => f.appId).map(f => {
  // Launch has two apps with the name Launch but they have unique appIds
  // Some newer apps may have a default name assigned as Adobe Experience Cloud
  const commonNames = ['Adobe Experience Cloud', 'Experience Manager', 'Launch'];
  const ignoreAppIdConcat = ['experienceManagerUI'];
  const name = commonNames.indexOf(f.name) > -1 && ignoreAppIdConcat.indexOf(f.appId) === -1 ?
    `${f.name}_${f.appId}` :
    f.name;
  return `\n  ${updateName(name)} = '${f.appId}'`;
})));

// Adds the default IDs on the list.
Object.keys(DEFAULT_IDS).forEach(key => ids.add(`\n  ${key} = '${DEFAULT_IDS[key]}'`));

const appIdsPath = require.resolve(path.join(__dirname, '../appapi.ts'));
const appIdsContents = fs.readFileSync(appIdsPath, 'utf8');
const appIdsNewContents = appIdsContents.replace(
  /export enum AppIds \{.*?\}/s,
  `export enum AppIds {${Array.from(ids).sort()}\n}`);
try {
  fs.writeFileSync(appIdsPath, appIdsNewContents, 'utf8');
} catch (err) {
  console.log(`Failed to write ${appIdsPath}`, err); // eslint-disable-line no-console
}
