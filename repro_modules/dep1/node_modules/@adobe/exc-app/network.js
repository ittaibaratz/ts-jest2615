"use strict";
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = exports.fetch = exports.FetchScope = exports.ROUTING = void 0;
/**
 * APIs that simplify code to make authenticated network requests for resources, execute GraphQL
 * queries, etc..
 *
 * ***Import:***
 *
 * ```typescript
 * import {fetch, query} from '@adobe/exc-app/network';
 * ```
 *
 * ***Default export:***
 *
 * [NetworkApi](../interfaces/network.networkapi.md)
 *
 * ***Usage:***
 *
 * ```typescript
 * import {fetch, query} from '@adobe/exc-app/network';
 *
 * // Performs a window.fetch call with Authorization and x-api-key headers set
 * const fetchResponse = await fetch('https://localhost', {auth: 'Header', method: 'GET'});
 *
 * // Executes a query for resources to the ExC GraphQL service
 * const queryResponse = await query({
 *   data: {
 *     query: `
 *       query userBehanceQuery($userId: String!, $apiKey: String!) {
 *         userBehance(userId: $userId, apiKey: $apiKey) {
 *           images
 *         }
 *       }`,
 *     variables: {
 *       apiKey: 'test-app',
 *       userId: '123@AdobeID'
 *     }
 *   },
 *   operationName: 'BehanceAvatar'
 * });
 *
 * ```
 * @packageDocumentation
 * @module network
 */
const Global_1 = require("./src/Global");
var ROUTING;
(function (ROUTING) {
    ROUTING[ROUTING["AEP_PROFILE_BASED"] = 0] = "AEP_PROFILE_BASED";
})(ROUTING = exports.ROUTING || (exports.ROUTING = {}));
/**
 * This parameter will be used to specify what headers are automatically added to the API call.
 */
var FetchScope;
(function (FetchScope) {
    /**
     * ***none: Minimal scope***
     * No headers are added. Use case: Non authenticated calls.
     */
    FetchScope["NONE"] = "NONE";
    /**
     * *** auth: Authentication only. Only auth headers will be added: ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     */
    FetchScope["AUTH"] = "AUTH";
    /**
     * *** org: Authentication + IMS Org. ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     */
    FetchScope["ORG"] = "ORG";
    /**
     * *** sandbox: Authentication +IMS Org + PALM Sandboxes. ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     * x-sandbox-name: <SANDBOX NAME>
     */
    FetchScope["SANDBOX"] = "SANDBOX";
    /**
     * *** sandbox-plus: additional headers required with sandbox . ***
     * authentication: Bearer <TOKEN>
     * x-api-key: exc_app or custom ID provided by SPA configuration
     * x-gw-ims-org-id: <IMS ORG ID>
     * x-sandbox-name: <SANDBOX NAME>
     * x-sandbox-type: <SANDBOX TYPE>
     * x-sandbox-default: <SANDBOX DEFAULT>
     */
    FetchScope["SANDBOX_PLUS"] = "SANDBOX_PLUS";
})(FetchScope = exports.FetchScope || (exports.FetchScope = {}));
/**
 * Provides an interface for fetching resources powered by the global 'fetch' API.
 *
 * ***Example:***
 *
 * ```typescript
 * // performs a window.fetch call
 * let response = await fetch('https://example.com/api/ping');
 *
 * // performs a window.fetch call with Authorization and x-api-key headers set
 * response = await fetch('https://localhost', {auth: 'Header', method: 'GET'});
 *
 * // performs a window.fetch call with user_token and client_id query parameters added to the URL
 * const request = new Request('https://localhost', {
 *   body: JSON.stringify({k: 'v'}),
 *   headers: new Headers(),
 *   method: 'POST'
 * });
 * response = await fetch(request, {auth: 'Header'});
 * ```
 * @param input The resource that you wish to fetch. It can either be the URL of the resource you
 * want to fetch or a Request object.
 * @param init An object containing any custom settings that you want to apply to the request.
 * @returns The promise for the response to the fetch operation.
 */
function fetch(input, init) {
    return Global_1.getImpl('network').fetch(input, init);
}
exports.fetch = fetch;
/**
 * Provides an interface for querying resources via GraphqQL.
 * In order to consume query, please make sure the respective query resolver is
 * available in the GraphQL Service.
 * ***Example:***
 *
 * ```typescript
 * const BEHANCE_QUERY = `
 *   query userBehanceQuery($userId: String!, $apiKey: String!) {
 *     userBehance(userId: $userId, apiKey: $apiKey) {
 *       images
 *     }
 *   }`;
 *
 * // queries the respective resource via GraphQL and returns HTTP Response {ok: true, status: 200, ...}
 * query({data: {query: BEHANCE_QUERY, variables: {
 *   userId: '123@AdobeID',
 *   apiKey: 'test-app',
 * }}, operationName: 'BehanceAvatar'});
 *
 * // queries the respective resource via GraphQL and returns HTTP Response {ok: true, status: 200, ...}
 * query({data: {query: `
 *   query userBehanceQuery {
 *     userBehance(userId: "123@AdobeID", apiKey: "test-app") {
 *       images
 *     }
 *   }`
 * }});
 * ```
 * @param input Query request containing desired GQL Query.
 * @returns The promise for the response to the query operation.
 */
function query(input) {
    return Global_1.getImpl('network').query(input);
}
exports.query = query;
//# sourceMappingURL=network.js.map