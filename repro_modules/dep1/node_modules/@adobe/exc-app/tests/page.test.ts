/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
import Global, {Modules} from '../src/Global';
import page from '../page';

describe('page/index.js', () => {
  beforeEach(() => {
    (Global['exc-module-runtime'] as Modules) = {
      page: {
        appContainer: 'testContainer',
        blockNavigation: (enabled, options) => {
          console.log(enabled, options); // eslint-disable-line no-console
        },
        done: () => {},
        favicon: 'test.ico',
        generateShellUrl: (location, newApp) => {
          console.log(location, newApp); // eslint-disable-line no-console
        },
        iframeReload: () => {},
        modal: true,
        notFound: () => {},
        preventDefaultCombos: [{ctrlKey: true, key: 'A'}],
        shellRedirect: (path, options) => {
          console.log(path, options); // eslint-disable-line no-console
        },
        spinner: true,
        title: 'test title',
        unloadPromptMessage: 'Are you sure?'
      }
    } as Modules;
  });

  it('correctly sets up the connection with module-runtime', () => {
    const doneSpy = jest.spyOn(Global['exc-module-runtime'].page, 'done');
    page.done();
    expect(doneSpy).toBeCalledTimes(1);

    expect(page.appContainer).toBe('testContainer');
    page.appContainer = 'testingContainer';
    expect(Global['exc-module-runtime'].page.appContainer).toBe('testingContainer');

    const notFoundSpy = jest.spyOn(Global['exc-module-runtime'].page, 'notFound');
    page.notFound();
    expect(notFoundSpy).toBeCalledTimes(1);

    expect(page.favicon).toBe('test.ico');
    page.favicon = 'updated.ico';
    expect(Global['exc-module-runtime'].page.favicon).toBe('updated.ico');

    const iframeReloadSpy = jest.spyOn(Global['exc-module-runtime'].page, 'iframeReload');
    page.iframeReload();
    expect(iframeReloadSpy).toBeCalledTimes(1);
    expect(iframeReloadSpy).toBeCalledWith();
    page.iframeReload(false);
    expect(iframeReloadSpy).toBeCalledTimes(2);
    expect(iframeReloadSpy).toBeCalledWith(false);

    const generateShellUrlSpy = jest.spyOn(Global['exc-module-runtime'].page, 'generateShellUrl');
    page.generateShellUrl({path: '/path'}, false);
    expect(generateShellUrlSpy).toBeCalledTimes(1);
    expect(generateShellUrlSpy).toBeCalledWith({path: '/path'}, false);
    page.generateShellUrl({path: '/path', sandbox: 'sbox'}, false);
    expect(generateShellUrlSpy).toBeCalledWith({path: '/path', sandbox: 'sbox'}, false);

    expect(page.modal).toBe(true);
    page.modal = false;
    expect(Global['exc-module-runtime'].page.modal).toBe(false);

    expect(page.preventDefaultCombos.length).toBe(1);
    expect(page.preventDefaultCombos[0].key).toBe('A');
    page.preventDefaultCombos = [{ctrlKey: true, key: 'A'}, {altKey: false, key: 'B'}];
    expect(Global['exc-module-runtime'].page.preventDefaultCombos.length).toBe(2);
    expect(page.preventDefaultCombos[1].key).toBe('B');

    const shellRedirectSpy = jest.spyOn(Global['exc-module-runtime'].page, 'shellRedirect');
    page.shellRedirect('test path');
    expect(shellRedirectSpy).toBeCalledTimes(1);
    expect(shellRedirectSpy).toBeCalledWith('test path');
    page.shellRedirect('new path', {discovery: true});
    expect(shellRedirectSpy).toBeCalledTimes(2);
    expect(shellRedirectSpy).toBeCalledWith('new path', {discovery: true});
    page.shellRedirect('new path', {replace: false});
    expect(shellRedirectSpy).toBeCalledTimes(3);
    expect(shellRedirectSpy).toBeCalledWith('new path', {replace: false});

    expect(page.spinner).toBe(true);
    page.spinner = false;
    expect(Global['exc-module-runtime'].page.spinner).toBe(false);

    expect(page.title).toBe('test title');
    page.title = 'updated title';
    expect(Global['exc-module-runtime'].page.title).toBe('updated title');

    const blockNavSpy = jest.spyOn(Global['exc-module-runtime'].page, 'blockNavigation');
    page.blockNavigation(true);
    expect(blockNavSpy).toBeCalledTimes(1);

    expect(page.unloadPromptMessage).toBe('Are you sure?');
    page.unloadPromptMessage = 'But are you sure you are sure?';
    expect(Global['exc-module-runtime'].page.unloadPromptMessage).toBe('But are you sure you are sure?');
  });
});
