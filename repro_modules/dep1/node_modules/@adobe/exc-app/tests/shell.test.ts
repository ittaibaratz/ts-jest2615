/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
import Global, {Modules} from '../src/Global';
import shell, {ShellApi, ShellInfo} from '../shell';

describe('shell.ts', () => {
  const evt = '';
  const handler = () => {};
  const shellMock = {
    emit: (type, evt) => {
      return {evt, type};
    },
    get: (param: ShellInfo) => {
      return Promise.resolve(param);
    },
    off: (type, handler) => {
      return {handler, type};
    },
    on: (type, handler) => {
      return {handler, type};
    }
  } as ShellApi;

  beforeEach(() => {
    (Global['exc-module-runtime'] as Modules) = {
      shell: () => {
        return shellMock;
      }
    } as Modules;
  });

  it('can emit()', () => {
    const spy = jest.spyOn(shellMock, 'emit');

    // action
    shell.emit('change:environment', evt),

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:environment', evt);
  });

  it('can get()', async () => {
    const spy = jest.spyOn(shellMock, 'get');

    // action
    await Promise.all([
      shell.get('environment'),
      shell.get('imsEnvironment'),
      shell.get('shellInfo')
    ]);

    // verify
    expect(spy).toBeCalledTimes(3);
    expect(spy).toBeCalledWith('environment');
    expect(spy).toBeCalledWith('imsEnvironment');
    expect(spy).toBeCalledWith('shellInfo');
  });

  it('can off()', () => {
    const spy = jest.spyOn(shellMock, 'off');

    // action
    shell.off('change:environment', handler),

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:environment', handler);
  });

  it('can on()', () => {
    const spy = jest.spyOn(shellMock, 'on');

    // action
    shell.on('change:environment', handler),

    // verify
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith('change:environment', handler);
  });
});
