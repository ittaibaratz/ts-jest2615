"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
const Global_1 = __importStar(require("../src/Global"));
const index_1 = __importStar(require("../index"));
describe('index.js', () => {
    it('throws error if module-runtime not available on page', () => {
        Global_1.default['exc-module-runtime'] = null;
        expect(Global_1.getImpl).toThrow('module-runtime APIs not available.');
    });
    it('configures bootstrap function if module-runtime not ready', () => {
        Global_1.default['exc-module-runtime'] = null;
        const bootstrap = () => { };
        expect(Global_1.default.EXC_MR_READY).not.toBeDefined();
        index_1.init(bootstrap);
        expect(Global_1.default.EXC_MR_READY).toBeDefined();
    });
    it('executes bootstrap function if module-runtime ready', () => {
        const runtime = {};
        Global_1.default['exc-module-runtime'] = {
            default: () => runtime
        };
        const data = {
            bootstrap: () => { }
        };
        const spy = jest.spyOn(data, 'bootstrap');
        index_1.init(data.bootstrap);
        expect(spy).toBeCalledTimes(1);
        expect(spy).toBeCalledWith(runtime);
    });
    it('allows access to runtime object', () => {
        const expectedRuntime = {};
        Global_1.default['exc-module-runtime'] = {
            default: () => expectedRuntime
        };
        expect(index_1.default()).toBe(expectedRuntime);
    });
});
//# sourceMappingURL=index.test.js.map