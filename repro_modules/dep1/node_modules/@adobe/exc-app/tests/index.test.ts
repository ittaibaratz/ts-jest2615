/*************************************************************************
 * Copyright 2020 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 **************************************************************************/
import Global, {getImpl, Modules} from '../src/Global';
import runtime, {init, Runtime} from '../index';

describe('index.js', () => {
  it('throws error if module-runtime not available on page', () => {
    (Global['exc-module-runtime'] as any) = null;
    expect(getImpl).toThrow('module-runtime APIs not available.');
  });

  it('configures bootstrap function if module-runtime not ready', () => {
    (Global['exc-module-runtime'] as any) = null;
    const bootstrap = () => { };
    expect(Global.EXC_MR_READY).not.toBeDefined();
    init(bootstrap);
    expect(Global.EXC_MR_READY).toBeDefined();
  });

  it('executes bootstrap function if module-runtime ready', () => {
    const runtime = {};
    (Global['exc-module-runtime'] as Modules) = {
      default: () => runtime
    } as Modules;
    const data = {
      bootstrap: () => { }
    };
    const spy = jest.spyOn(data, 'bootstrap');
    init(data.bootstrap);
    expect(spy).toBeCalledTimes(1);
    expect(spy).toBeCalledWith(runtime);
  });

  it('allows access to runtime object', () => {
    const expectedRuntime = {} as Runtime;
    (Global['exc-module-runtime'] as Modules) = {
      default: () => expectedRuntime
    } as Modules;
    expect(runtime()).toBe(expectedRuntime);

  });
});
